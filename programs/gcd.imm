
@global_str = private unnamed_addr constant [33 x i8] c"Give me two positive integers: \0A\00", align 1
@global_str.1 = private unnamed_addr constant [16 x i8] c"\0ATheir GCD is: \00", align 1
@global_str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

declare void @writeInteger(i32)

declare void @writeByte(i8)

declare void @writeChar(i8)

declare void @writeString(ptr)

declare i32 @readInteger()

declare i8 @readByte()

declare i8 @readChar()

declare void @readString(i32, ptr)

declare i32 @extend(i8)

declare i8 @shrink(i32)

declare i32 @strlen(ptr)

declare i32 @strcmp(ptr, ptr)

declare void @strcpy(ptr, ptr)

declare void @strcat(ptr, ptr)

define i32 @main() {
entry:
  call void @gcd()
  ret i32 0
}

define void @gcd() {
gcd_entry:
  %a = alloca i32, align 4
  store i32 0, ptr %a, align 4
  %b = alloca i32, align 4
  store i32 0, ptr %b, align 4
  call void @writeString(ptr @global_str)
  %readInteger_call = call i32 @readInteger()
  store i32 %readInteger_call, ptr %a, align 4
  %readInteger_call1 = call i32 @readInteger()
  store i32 %readInteger_call1, ptr %b, align 4
  call void @writeString(ptr @global_str.1)
  %find_gcd_arg = load i32, ptr %a, align 4
  %find_gcd_arg2 = load i32, ptr %b, align 4
  %find_gcd_call = call i32 @find_gcd(i32 %find_gcd_arg, i32 %find_gcd_arg2)
  call void @writeInteger(i32 %find_gcd_call)
  call void @writeString(ptr @global_str.2)
  ret void
}

define i32 @find_gcd(i32 %a, i32 %b) {
find_gcd_entry:
  %a1 = alloca i32, align 4
  store i32 %a, ptr %a1, align 4
  %b2 = alloca i32, align 4
  store i32 %b, ptr %b2, align 4
  %i = alloca i32, align 4
  store i32 0, ptr %i, align 4
  %left_load = load i32, ptr %a1, align 4
  %right_load = load i32, ptr %b2, align 4
  %gttmp = icmp sgt i32 %left_load, %right_load
  %0 = zext i1 %gttmp to i32
  %if_cond = icmp ne i32 %0, 0
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %find_gcd_entry
  %load_rvalue = load i32, ptr %a1, align 4
  store i32 %load_rvalue, ptr %i, align 4
  br label %ifcont

else:                                             ; preds = %find_gcd_entry
  %load_rvalue3 = load i32, ptr %b2, align 4
  store i32 %load_rvalue3, ptr %i, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %cond

cond:                                             ; preds = %ifcont15, %ifcont
  %left_load4 = load i32, ptr %i, align 4
  %gttmp5 = icmp sgt i32 %left_load4, 1
  %1 = zext i1 %gttmp5 to i32
  %while_cond = icmp ne i32 %1, 0
  br i1 %while_cond, label %loop, label %afterloop

loop:                                             ; preds = %cond
  %left_load6 = load i32, ptr %a1, align 4
  %right_load7 = load i32, ptr %i, align 4
  %modtmp = srem i32 %left_load6, %right_load7
  %eqtmp = icmp eq i32 %modtmp, 0
  br i1 %eqtmp, label %trueBlock, label %falseBlock

trueBlock:                                        ; preds = %loop
  %left_load8 = load i32, ptr %b2, align 4
  %right_load9 = load i32, ptr %i, align 4
  %modtmp10 = srem i32 %left_load8, %right_load9
  %eqtmp11 = icmp eq i32 %modtmp10, 0
  br label %mergeBlock

falseBlock:                                       ; preds = %loop
  br label %mergeBlock

mergeBlock:                                       ; preds = %falseBlock, %trueBlock
  %andtmp = phi i1 [ %eqtmp11, %trueBlock ], [ false, %falseBlock ]
  %2 = zext i1 %andtmp to i32
  %if_cond13 = icmp ne i32 %2, 0
  br i1 %if_cond13, label %then12, label %else14

then12:                                           ; preds = %mergeBlock
  %ret_val = load i32, ptr %i, align 4
  ret i32 %ret_val

else14:                                           ; preds = %mergeBlock
  br label %ifcont15

ifcont15:                                         ; preds = %else14
  %left_load16 = load i32, ptr %i, align 4
  %subtmp = sub i32 %left_load16, 1
  store i32 %subtmp, ptr %i, align 4
  br label %cond

afterloop:                                        ; preds = %cond
  ret i32 1
}
