
@global_str = private unnamed_addr constant [37 x i8] c"Please, give me a positive integer: \00", align 1
@global_str.2 = private unnamed_addr constant [28 x i8] c"The non-trivial factors of \00", align 1
@global_str.3 = private unnamed_addr constant [8 x i8] c" are: \0A\00", align 1
@global_str.4 = private unnamed_addr constant [11 x i8] c" is prime\0A\00", align 1

declare void @writeInteger(i32)

declare void @writeByte(i8)

declare void @writeChar(i8)

declare void @writeString(ptr)

declare i32 @readInteger()

declare i8 @readByte()

declare i8 @readChar()

declare void @readString(i32, ptr)

declare i32 @extend(i8)

declare i8 @shrink(i32)

declare i32 @strlen(ptr)

declare i32 @strcmp(ptr, ptr)

declare void @strcpy(ptr, ptr)

declare void @strcat(ptr, ptr)

define i32 @main() {
entry:
  call void @main.1()
  ret i32 0
}

define void @main.1() {
main_entry:
  %n = alloca i32, align 4
  store i32 0, ptr %n, align 4
  %lcv = alloca i32, align 4
  store i32 0, ptr %lcv, align 4
  %flag = alloca i32, align 4
  store i32 0, ptr %flag, align 4
  call void @writeString(ptr @global_str)
  %readInteger_call = call i32 @readInteger()
  store i32 %readInteger_call, ptr %n, align 4
  store i32 2, ptr %lcv, align 4
  store i32 1, ptr %flag, align 4
  br label %cond

cond:                                             ; preds = %ifcont8, %main_entry
  %left_load = load i32, ptr %n, align 4
  %divtmp = sdiv i32 %left_load, 2
  %left_load1 = load i32, ptr %lcv, align 4
  %ltetmp = icmp sle i32 %left_load1, %divtmp
  %0 = zext i1 %ltetmp to i32
  %while_cond = icmp ne i32 %0, 0
  br i1 %while_cond, label %loop, label %afterloop

loop:                                             ; preds = %cond
  %left_load2 = load i32, ptr %n, align 4
  %right_load = load i32, ptr %lcv, align 4
  %modtmp = srem i32 %left_load2, %right_load
  %eqtmp = icmp eq i32 %modtmp, 0
  %1 = zext i1 %eqtmp to i32
  %if_cond = icmp ne i32 %1, 0
  br i1 %if_cond, label %then, label %else7

then:                                             ; preds = %loop
  %left_load3 = load i32, ptr %flag, align 4
  %neqtmp = icmp ne i32 %left_load3, 0
  %2 = zext i1 %neqtmp to i32
  %if_cond5 = icmp ne i32 %2, 0
  br i1 %if_cond5, label %then4, label %else

then4:                                            ; preds = %then
  call void @writeString(ptr @global_str.2)
  %writeInteger_arg = load i32, ptr %n, align 4
  call void @writeInteger(i32 %writeInteger_arg)
  call void @writeString(ptr @global_str.3)
  br label %ifcont

else:                                             ; preds = %then
  br label %ifcont

ifcont:                                           ; preds = %else, %then4
  store i32 0, ptr %flag, align 4
  %writeInteger_arg6 = load i32, ptr %lcv, align 4
  call void @writeInteger(i32 %writeInteger_arg6)
  call void @writeChar(i8 10)
  br label %ifcont8

else7:                                            ; preds = %loop
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %ifcont
  %left_load9 = load i32, ptr %lcv, align 4
  %addtmp = add i32 %left_load9, 1
  store i32 %addtmp, ptr %lcv, align 4
  br label %cond

afterloop:                                        ; preds = %cond
  %left_load10 = load i32, ptr %flag, align 4
  %neqtmp11 = icmp ne i32 %left_load10, 0
  %3 = zext i1 %neqtmp11 to i32
  %if_cond13 = icmp ne i32 %3, 0
  br i1 %if_cond13, label %then12, label %else15

then12:                                           ; preds = %afterloop
  %writeInteger_arg14 = load i32, ptr %n, align 4
  call void @writeInteger(i32 %writeInteger_arg14)
  call void @writeString(ptr @global_str.4)
  br label %ifcont16

else15:                                           ; preds = %afterloop
  br label %ifcont16

ifcont16:                                         ; preds = %else15, %then12
  ret void
}
