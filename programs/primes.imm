
@global_str = private unnamed_addr constant [34 x i8] c"Please, give me the upper limit: \00", align 1
@global_str.2 = private unnamed_addr constant [29 x i8] c"Prime numbers between 0 and \00", align 1
@global_str.3 = private unnamed_addr constant [4 x i8] c":\0A\0A\00", align 1
@global_str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@global_str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@global_str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@global_str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@global_str.8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@global_str.9 = private unnamed_addr constant [30 x i8] c" prime number(s) were found.\0A\00", align 1

declare void @writeInteger(i32)

declare void @writeByte(i8)

declare void @writeChar(i8)

declare void @writeString(ptr)

declare i32 @readInteger()

declare i8 @readByte()

declare i8 @readChar()

declare void @readString(i32, ptr)

declare i32 @extend(i8)

declare i8 @shrink(i32)

declare i32 @strlen(ptr)

declare i32 @strcmp(ptr, ptr)

declare void @strcpy(ptr, ptr)

declare void @strcat(ptr, ptr)

define i32 @main() {
entry:
  call void @main.1()
  ret i32 0
}

define void @main.1() {
main_entry:
  %limit = alloca i32, align 4
  store i32 0, ptr %limit, align 4
  %number = alloca i32, align 4
  store i32 0, ptr %number, align 4
  %counter = alloca i32, align 4
  store i32 0, ptr %counter, align 4
  call void @writeString(ptr @global_str)
  %readInteger_call = call i32 @readInteger()
  store i32 %readInteger_call, ptr %limit, align 4
  call void @writeString(ptr @global_str.2)
  %writeInteger_arg = load i32, ptr %limit, align 4
  call void @writeInteger(i32 %writeInteger_arg)
  call void @writeString(ptr @global_str.3)
  store i32 0, ptr %counter, align 4
  %left_load = load i32, ptr %limit, align 4
  %gtetmp = icmp sge i32 %left_load, 2
  %0 = zext i1 %gtetmp to i32
  %if_cond = icmp ne i32 %0, 0
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %main_entry
  %left_load1 = load i32, ptr %counter, align 4
  %addtmp = add i32 %left_load1, 1
  store i32 %addtmp, ptr %counter, align 4
  call void @writeInteger(i32 2)
  call void @writeString(ptr @global_str.4)
  br label %ifcont

else:                                             ; preds = %main_entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %left_load2 = load i32, ptr %limit, align 4
  %gtetmp3 = icmp sge i32 %left_load2, 3
  %1 = zext i1 %gtetmp3 to i32
  %if_cond5 = icmp ne i32 %1, 0
  br i1 %if_cond5, label %then4, label %else8

then4:                                            ; preds = %ifcont
  %left_load6 = load i32, ptr %counter, align 4
  %addtmp7 = add i32 %left_load6, 1
  store i32 %addtmp7, ptr %counter, align 4
  call void @writeInteger(i32 3)
  call void @writeString(ptr @global_str.5)
  br label %ifcont9

else8:                                            ; preds = %ifcont
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then4
  store i32 6, ptr %number, align 4
  br label %cond

cond:                                             ; preds = %ifcont33, %ifcont9
  %left_load10 = load i32, ptr %number, align 4
  %right_load = load i32, ptr %limit, align 4
  %ltetmp = icmp sle i32 %left_load10, %right_load
  %2 = zext i1 %ltetmp to i32
  %while_cond = icmp ne i32 %2, 0
  br i1 %while_cond, label %loop, label %afterloop

loop:                                             ; preds = %cond
  %left_load11 = load i32, ptr %number, align 4
  %subtmp = sub i32 %left_load11, 1
  %prime_call = call i32 @prime(i32 %subtmp)
  %eqtmp = icmp eq i32 %prime_call, 1
  %3 = zext i1 %eqtmp to i32
  %if_cond13 = icmp ne i32 %3, 0
  br i1 %if_cond13, label %then12, label %else18

then12:                                           ; preds = %loop
  %left_load14 = load i32, ptr %counter, align 4
  %addtmp15 = add i32 %left_load14, 1
  store i32 %addtmp15, ptr %counter, align 4
  %left_load16 = load i32, ptr %number, align 4
  %subtmp17 = sub i32 %left_load16, 1
  call void @writeInteger(i32 %subtmp17)
  call void @writeString(ptr @global_str.6)
  br label %ifcont19

else18:                                           ; preds = %loop
  br label %ifcont19

ifcont19:                                         ; preds = %else18, %then12
  %left_load20 = load i32, ptr %number, align 4
  %right_load21 = load i32, ptr %limit, align 4
  %neqtmp = icmp ne i32 %left_load20, %right_load21
  br i1 %neqtmp, label %trueBlock, label %falseBlock

trueBlock:                                        ; preds = %ifcont19
  %left_load22 = load i32, ptr %number, align 4
  %addtmp23 = add i32 %left_load22, 1
  %prime_call24 = call i32 @prime(i32 %addtmp23)
  %eqtmp25 = icmp eq i32 %prime_call24, 1
  br label %mergeBlock

falseBlock:                                       ; preds = %ifcont19
  br label %mergeBlock

mergeBlock:                                       ; preds = %falseBlock, %trueBlock
  %andtmp = phi i1 [ %eqtmp25, %trueBlock ], [ false, %falseBlock ]
  %4 = zext i1 %andtmp to i32
  %if_cond27 = icmp ne i32 %4, 0
  br i1 %if_cond27, label %then26, label %else32

then26:                                           ; preds = %mergeBlock
  %left_load28 = load i32, ptr %counter, align 4
  %addtmp29 = add i32 %left_load28, 1
  store i32 %addtmp29, ptr %counter, align 4
  %left_load30 = load i32, ptr %number, align 4
  %addtmp31 = add i32 %left_load30, 1
  call void @writeInteger(i32 %addtmp31)
  call void @writeString(ptr @global_str.7)
  br label %ifcont33

else32:                                           ; preds = %mergeBlock
  br label %ifcont33

ifcont33:                                         ; preds = %else32, %then26
  %left_load34 = load i32, ptr %number, align 4
  %addtmp35 = add i32 %left_load34, 6
  store i32 %addtmp35, ptr %number, align 4
  br label %cond

afterloop:                                        ; preds = %cond
  call void @writeString(ptr @global_str.8)
  %writeInteger_arg36 = load i32, ptr %counter, align 4
  call void @writeInteger(i32 %writeInteger_arg36)
  call void @writeString(ptr @global_str.9)
  ret void
}

define i32 @prime(i32 %n) {
prime_entry:
  %n1 = alloca i32, align 4
  store i32 %n, ptr %n1, align 4
  %i = alloca i32, align 4
  store i32 0, ptr %i, align 4
  %left_load = load i32, ptr %n1, align 4
  %lttmp = icmp slt i32 %left_load, 0
  %0 = zext i1 %lttmp to i32
  %if_cond = icmp ne i32 %0, 0
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %prime_entry
  %load_expr = load i32, ptr %n1, align 4
  %negtmp = sub i32 0, %load_expr
  %prime_call = call i32 @prime(i32 %negtmp)
  ret i32 %prime_call

else:                                             ; preds = %prime_entry
  %left_load2 = load i32, ptr %n1, align 4
  %lttmp3 = icmp slt i32 %left_load2, 2
  %1 = zext i1 %lttmp3 to i32
  %if_cond5 = icmp ne i32 %1, 0
  br i1 %if_cond5, label %then4, label %else6

then4:                                            ; preds = %else
  ret i32 0

else6:                                            ; preds = %else
  %left_load7 = load i32, ptr %n1, align 4
  %eqtmp = icmp eq i32 %left_load7, 2
  %2 = zext i1 %eqtmp to i32
  %if_cond9 = icmp ne i32 %2, 0
  br i1 %if_cond9, label %then8, label %else10

then8:                                            ; preds = %else6
  ret i32 1

else10:                                           ; preds = %else6
  %left_load11 = load i32, ptr %n1, align 4
  %modtmp = srem i32 %left_load11, 2
  %eqtmp12 = icmp eq i32 %modtmp, 0
  %3 = zext i1 %eqtmp12 to i32
  %if_cond14 = icmp ne i32 %3, 0
  br i1 %if_cond14, label %then13, label %else15

then13:                                           ; preds = %else10
  ret i32 0

else15:                                           ; preds = %else10
  store i32 3, ptr %i, align 4
  br label %cond

cond:                                             ; preds = %ifcont, %else15
  %left_load16 = load i32, ptr %n1, align 4
  %divtmp = sdiv i32 %left_load16, 2
  %left_load17 = load i32, ptr %i, align 4
  %ltetmp = icmp sle i32 %left_load17, %divtmp
  %4 = zext i1 %ltetmp to i32
  %while_cond = icmp ne i32 %4, 0
  br i1 %while_cond, label %loop, label %afterloop

loop:                                             ; preds = %cond
  %left_load18 = load i32, ptr %n1, align 4
  %right_load = load i32, ptr %i, align 4
  %modtmp19 = srem i32 %left_load18, %right_load
  %eqtmp20 = icmp eq i32 %modtmp19, 0
  %5 = zext i1 %eqtmp20 to i32
  %if_cond22 = icmp ne i32 %5, 0
  br i1 %if_cond22, label %then21, label %else23

then21:                                           ; preds = %loop
  ret i32 0

else23:                                           ; preds = %loop
  br label %ifcont

ifcont:                                           ; preds = %else23
  %left_load24 = load i32, ptr %i, align 4
  %addtmp = add i32 %left_load24, 2
  store i32 %addtmp, ptr %i, align 4
  br label %cond

afterloop:                                        ; preds = %cond
  ret i32 1
}
