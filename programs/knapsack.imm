
declare void @writeInteger(i32)

declare void @writeByte(i8)

declare void @writeChar(i8)

declare void @writeString(ptr)

declare i32 @readInteger()

declare i8 @readByte()

declare i8 @readChar()

declare void @readString(i32, ptr)

declare i32 @extend(i8)

declare i8 @shrink(i32)

declare i32 @strlen(ptr)

declare i32 @strcmp(ptr, ptr)

declare void @strcpy(ptr, ptr)

declare void @strcat(ptr, ptr)

define i32 @main() {
entry:
  call void @main.1()
  ret i32 0
}

define void @main.1() {
main_entry:
  %n = alloca i32, align 4
  store i32 0, ptr %n, align 4
  %weight_max = alloca i32, align 4
  store i32 0, ptr %weight_max, align 4
  %profit = alloca [10000 x i32], align 4
  store [10000 x i32] zeroinitializer, ptr %profit, align 4
  %weight = alloca [10000 x i32], align 4
  store [10000 x i32] zeroinitializer, ptr %weight, align 4
  %res = alloca i32, align 4
  store i32 0, ptr %res, align 4
  %i = alloca i32, align 4
  store i32 0, ptr %i, align 4
  %readInteger_call = call i32 @readInteger()
  store i32 %readInteger_call, ptr %n, align 4
  %readInteger_call1 = call i32 @readInteger()
  store i32 %readInteger_call1, ptr %weight_max, align 4
  %left_load = load i32, ptr %n, align 4
  %ltetmp = icmp sle i32 %left_load, 0
  %0 = zext i1 %ltetmp to i32
  %if_cond = icmp ne i32 %0, 0
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %main_entry
  ret void

else:                                             ; preds = %main_entry
  br label %ifcont

ifcont:                                           ; preds = %else
  store i32 0, ptr %i, align 4
  br label %cond

cond:                                             ; preds = %loop, %ifcont
  %left_load2 = load i32, ptr %i, align 4
  %right_load = load i32, ptr %n, align 4
  %lttmp = icmp slt i32 %left_load2, %right_load
  %1 = zext i1 %lttmp to i32
  %while_cond = icmp ne i32 %1, 0
  br i1 %while_cond, label %loop, label %afterloop

loop:                                             ; preds = %cond
  %readInteger_call3 = call i32 @readInteger()
  %load_index = load i32, ptr %i, align 4
  %elementptr = getelementptr [10000 x i32], ptr %profit, i32 0, i32 %load_index
  store i32 %readInteger_call3, ptr %elementptr, align 4
  %left_load4 = load i32, ptr %i, align 4
  %addtmp = add i32 %left_load4, 1
  store i32 %addtmp, ptr %i, align 4
  br label %cond

afterloop:                                        ; preds = %cond
  store i32 0, ptr %i, align 4
  br label %cond5

cond5:                                            ; preds = %loop10, %afterloop
  %left_load6 = load i32, ptr %i, align 4
  %right_load7 = load i32, ptr %n, align 4
  %lttmp8 = icmp slt i32 %left_load6, %right_load7
  %2 = zext i1 %lttmp8 to i32
  %while_cond9 = icmp ne i32 %2, 0
  br i1 %while_cond9, label %loop10, label %afterloop16

loop10:                                           ; preds = %cond5
  %readInteger_call11 = call i32 @readInteger()
  %load_index12 = load i32, ptr %i, align 4
  %elementptr13 = getelementptr [10000 x i32], ptr %weight, i32 0, i32 %load_index12
  store i32 %readInteger_call11, ptr %elementptr13, align 4
  %left_load14 = load i32, ptr %i, align 4
  %addtmp15 = add i32 %left_load14, 1
  store i32 %addtmp15, ptr %i, align 4
  br label %cond5

afterloop16:                                      ; preds = %cond5
  %knapsack_arg = load i32, ptr %n, align 4
  %knapsack_arg17 = load i32, ptr %weight_max, align 4
  %knapsack_call = call i32 @knapsack(i32 %knapsack_arg, i32 %knapsack_arg17, ptr %profit, ptr %weight)
  store i32 %knapsack_call, ptr %res, align 4
  %writeInteger_arg = load i32, ptr %res, align 4
  call void @writeInteger(i32 %writeInteger_arg)
  call void @writeChar(i8 10)
  ret void
}

define i32 @knapsack(i32 %n, i32 %w_max, ptr %p, ptr %w) {
knapsack_entry:
  %n1 = alloca i32, align 4
  store i32 %n, ptr %n1, align 4
  %w_max2 = alloca i32, align 4
  store i32 %w_max, ptr %w_max2, align 4
  %p3 = alloca ptr, align 8
  store ptr %p, ptr %p3, align 8
  %w4 = alloca ptr, align 8
  store ptr %w, ptr %w4, align 8
  %dp = alloca [10000 x i32], align 4
  store [10000 x i32] zeroinitializer, ptr %dp, align 4
  %i = alloca i32, align 4
  store i32 0, ptr %i, align 4
  %w_c = alloca i32, align 4
  store i32 0, ptr %w_c, align 4
  store i32 0, ptr %w_c, align 4
  br label %cond

cond:                                             ; preds = %loop, %knapsack_entry
  %left_load = load i32, ptr %w_c, align 4
  %right_load = load i32, ptr %w_max2, align 4
  %ltetmp = icmp sle i32 %left_load, %right_load
  %0 = zext i1 %ltetmp to i32
  %while_cond = icmp ne i32 %0, 0
  br i1 %while_cond, label %loop, label %afterloop

loop:                                             ; preds = %cond
  %load_index = load i32, ptr %w_c, align 4
  %elementptr = getelementptr [10000 x i32], ptr %dp, i32 0, i32 %load_index
  store i32 0, ptr %elementptr, align 4
  %left_load5 = load i32, ptr %w_c, align 4
  %addtmp = add i32 %left_load5, 1
  store i32 %addtmp, ptr %w_c, align 4
  br label %cond

afterloop:                                        ; preds = %cond
  store i32 0, ptr %i, align 4
  br label %cond6

cond6:                                            ; preds = %afterloop52, %afterloop
  %left_load7 = load i32, ptr %i, align 4
  %right_load8 = load i32, ptr %n1, align 4
  %lttmp = icmp slt i32 %left_load7, %right_load8
  %1 = zext i1 %lttmp to i32
  %while_cond9 = icmp ne i32 %1, 0
  br i1 %while_cond9, label %loop10, label %afterloop55

loop10:                                           ; preds = %cond6
  %load_rvalue = load i32, ptr %w_max2, align 4
  store i32 %load_rvalue, ptr %w_c, align 4
  br label %cond11

cond11:                                           ; preds = %ifcont, %loop10
  %left_load12 = load i32, ptr %w_c, align 4
  %gttmp = icmp sgt i32 %left_load12, 0
  %2 = zext i1 %gttmp to i32
  %while_cond13 = icmp ne i32 %2, 0
  br i1 %while_cond13, label %loop14, label %afterloop52

loop14:                                           ; preds = %cond11
  %load_index15 = load i32, ptr %i, align 4
  %w_arrayptr = load ptr, ptr %w4, align 8
  %elementptr16 = getelementptr i32, ptr %w_arrayptr, i32 %load_index15
  %left_load17 = load i32, ptr %elementptr16, align 4
  %right_load18 = load i32, ptr %w_c, align 4
  %ltetmp19 = icmp sle i32 %left_load17, %right_load18
  br i1 %ltetmp19, label %trueBlock, label %falseBlock

trueBlock:                                        ; preds = %loop14
  %load_index20 = load i32, ptr %i, align 4
  %p_arrayptr = load ptr, ptr %p3, align 8
  %elementptr21 = getelementptr i32, ptr %p_arrayptr, i32 %load_index20
  %load_index22 = load i32, ptr %i, align 4
  %w_arrayptr23 = load ptr, ptr %w4, align 8
  %elementptr24 = getelementptr i32, ptr %w_arrayptr23, i32 %load_index22
  %left_load25 = load i32, ptr %w_c, align 4
  %right_load26 = load i32, ptr %elementptr24, align 4
  %subtmp = sub i32 %left_load25, %right_load26
  %elementptr27 = getelementptr [10000 x i32], ptr %dp, i32 0, i32 %subtmp
  %left_load28 = load i32, ptr %elementptr21, align 4
  %right_load29 = load i32, ptr %elementptr27, align 4
  %addtmp30 = add i32 %left_load28, %right_load29
  %load_index31 = load i32, ptr %w_c, align 4
  %elementptr32 = getelementptr [10000 x i32], ptr %dp, i32 0, i32 %load_index31
  %right_load33 = load i32, ptr %elementptr32, align 4
  %gttmp34 = icmp sgt i32 %addtmp30, %right_load33
  br label %mergeBlock

falseBlock:                                       ; preds = %loop14
  br label %mergeBlock

mergeBlock:                                       ; preds = %falseBlock, %trueBlock
  %andtmp = phi i1 [ %gttmp34, %trueBlock ], [ false, %falseBlock ]
  %3 = zext i1 %andtmp to i32
  %if_cond = icmp ne i32 %3, 0
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %mergeBlock
  %load_index35 = load i32, ptr %i, align 4
  %p_arrayptr36 = load ptr, ptr %p3, align 8
  %elementptr37 = getelementptr i32, ptr %p_arrayptr36, i32 %load_index35
  %load_index38 = load i32, ptr %i, align 4
  %w_arrayptr39 = load ptr, ptr %w4, align 8
  %elementptr40 = getelementptr i32, ptr %w_arrayptr39, i32 %load_index38
  %left_load41 = load i32, ptr %w_c, align 4
  %right_load42 = load i32, ptr %elementptr40, align 4
  %subtmp43 = sub i32 %left_load41, %right_load42
  %elementptr44 = getelementptr [10000 x i32], ptr %dp, i32 0, i32 %subtmp43
  %left_load45 = load i32, ptr %elementptr37, align 4
  %right_load46 = load i32, ptr %elementptr44, align 4
  %addtmp47 = add i32 %left_load45, %right_load46
  %load_index48 = load i32, ptr %w_c, align 4
  %elementptr49 = getelementptr [10000 x i32], ptr %dp, i32 0, i32 %load_index48
  store i32 %addtmp47, ptr %elementptr49, align 4
  br label %ifcont

else:                                             ; preds = %mergeBlock
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %left_load50 = load i32, ptr %w_c, align 4
  %subtmp51 = sub i32 %left_load50, 1
  store i32 %subtmp51, ptr %w_c, align 4
  br label %cond11

afterloop52:                                      ; preds = %cond11
  %left_load53 = load i32, ptr %i, align 4
  %addtmp54 = add i32 %left_load53, 1
  store i32 %addtmp54, ptr %i, align 4
  br label %cond6

afterloop55:                                      ; preds = %cond6
  %load_index56 = load i32, ptr %w_max2, align 4
  %elementptr57 = getelementptr [10000 x i32], ptr %dp, i32 0, i32 %load_index56
  %ret_val = load i32, ptr %elementptr57, align 4
  ret i32 %ret_val
}
