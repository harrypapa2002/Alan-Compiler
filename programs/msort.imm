
declare void @writeInteger(i32)

declare void @writeByte(i8)

declare void @writeChar(i8)

declare void @writeString(ptr)

declare i32 @readInteger()

declare i8 @readByte()

declare i8 @readChar()

declare void @readString(i32, ptr)

declare i32 @extend(i8)

declare i8 @shrink(i32)

declare i32 @strlen(ptr)

declare i32 @strcmp(ptr, ptr)

declare void @strcpy(ptr, ptr)

declare void @strcat(ptr, ptr)

define i32 @main() {
entry:
  call void @main.1()
  ret i32 0
}

define void @main.1() {
main_entry:
  %x = alloca [10000 x i32], align 4
  store [10000 x i32] zeroinitializer, ptr %x, align 4
  %n = alloca i32, align 4
  store i32 0, ptr %n, align 4
  %i = alloca i32, align 4
  store i32 0, ptr %i, align 4
  %readInteger_call = call i32 @readInteger()
  store i32 %readInteger_call, ptr %n, align 4
  %left_load = load i32, ptr %n, align 4
  %ltetmp = icmp sle i32 %left_load, 0
  %0 = zext i1 %ltetmp to i32
  %if_cond = icmp ne i32 %0, 0
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %main_entry
  ret void

else:                                             ; preds = %main_entry
  br label %ifcont

ifcont:                                           ; preds = %else
  store i32 0, ptr %i, align 4
  br label %cond

cond:                                             ; preds = %loop, %ifcont
  %left_load1 = load i32, ptr %i, align 4
  %right_load = load i32, ptr %n, align 4
  %lttmp = icmp slt i32 %left_load1, %right_load
  %1 = zext i1 %lttmp to i32
  %while_cond = icmp ne i32 %1, 0
  br i1 %while_cond, label %loop, label %afterloop

loop:                                             ; preds = %cond
  %readInteger_call2 = call i32 @readInteger()
  %load_index = load i32, ptr %i, align 4
  %elementptr = getelementptr [10000 x i32], ptr %x, i32 0, i32 %load_index
  store i32 %readInteger_call2, ptr %elementptr, align 4
  %left_load3 = load i32, ptr %i, align 4
  %addtmp = add i32 %left_load3, 1
  store i32 %addtmp, ptr %i, align 4
  br label %cond

afterloop:                                        ; preds = %cond
  %mergeSort_arg = load i32, ptr %n, align 4
  call void @mergeSort(ptr %x, i32 0, i32 %mergeSort_arg)
  %elementptr4 = getelementptr [10000 x i32], ptr %x, i32 0, i32 0
  %writeInteger_arg = load i32, ptr %elementptr4, align 4
  call void @writeInteger(i32 %writeInteger_arg)
  store i32 1, ptr %i, align 4
  br label %cond5

cond5:                                            ; preds = %loop10, %afterloop
  %left_load6 = load i32, ptr %i, align 4
  %right_load7 = load i32, ptr %n, align 4
  %lttmp8 = icmp slt i32 %left_load6, %right_load7
  %2 = zext i1 %lttmp8 to i32
  %while_cond9 = icmp ne i32 %2, 0
  br i1 %while_cond9, label %loop10, label %afterloop16

loop10:                                           ; preds = %cond5
  call void @writeChar(i8 32)
  %load_index11 = load i32, ptr %i, align 4
  %elementptr12 = getelementptr [10000 x i32], ptr %x, i32 0, i32 %load_index11
  %writeInteger_arg13 = load i32, ptr %elementptr12, align 4
  call void @writeInteger(i32 %writeInteger_arg13)
  %left_load14 = load i32, ptr %i, align 4
  %addtmp15 = add i32 %left_load14, 1
  store i32 %addtmp15, ptr %i, align 4
  br label %cond5

afterloop16:                                      ; preds = %cond5
  call void @writeChar(i8 10)
  ret void
}

define void @merge(ptr %x, i32 %start, i32 %mid, i32 %end) {
merge_entry:
  %x1 = alloca ptr, align 8
  store ptr %x, ptr %x1, align 8
  %start2 = alloca i32, align 4
  store i32 %start, ptr %start2, align 4
  %mid3 = alloca i32, align 4
  store i32 %mid, ptr %mid3, align 4
  %end4 = alloca i32, align 4
  store i32 %end, ptr %end4, align 4
  %tmp = alloca [10000 x i32], align 4
  store [10000 x i32] zeroinitializer, ptr %tmp, align 4
  %tmp_idx = alloca i32, align 4
  store i32 0, ptr %tmp_idx, align 4
  %l_itr = alloca i32, align 4
  store i32 0, ptr %l_itr, align 4
  %r_itr = alloca i32, align 4
  store i32 0, ptr %r_itr, align 4
  %x_itr = alloca i32, align 4
  store i32 0, ptr %x_itr, align 4
  %tmp_idx2 = alloca i32, align 4
  store i32 0, ptr %tmp_idx2, align 4
  store i32 0, ptr %tmp_idx, align 4
  %load_rvalue = load i32, ptr %start2, align 4
  store i32 %load_rvalue, ptr %l_itr, align 4
  %load_rvalue5 = load i32, ptr %mid3, align 4
  store i32 %load_rvalue5, ptr %r_itr, align 4
  br label %cond

cond:                                             ; preds = %ifcont, %merge_entry
  %left_load = load i32, ptr %l_itr, align 4
  %right_load = load i32, ptr %mid3, align 4
  %lttmp = icmp slt i32 %left_load, %right_load
  br i1 %lttmp, label %trueBlock, label %falseBlock

trueBlock:                                        ; preds = %cond
  %left_load6 = load i32, ptr %r_itr, align 4
  %right_load7 = load i32, ptr %end4, align 4
  %lttmp8 = icmp slt i32 %left_load6, %right_load7
  br label %mergeBlock

falseBlock:                                       ; preds = %cond
  br label %mergeBlock

mergeBlock:                                       ; preds = %falseBlock, %trueBlock
  %andtmp = phi i1 [ %lttmp8, %trueBlock ], [ false, %falseBlock ]
  %0 = zext i1 %andtmp to i32
  %while_cond = icmp ne i32 %0, 0
  br i1 %while_cond, label %loop, label %afterloop

loop:                                             ; preds = %mergeBlock
  %load_index = load i32, ptr %l_itr, align 4
  %x_arrayptr = load ptr, ptr %x1, align 8
  %elementptr = getelementptr i32, ptr %x_arrayptr, i32 %load_index
  %load_index9 = load i32, ptr %r_itr, align 4
  %x_arrayptr10 = load ptr, ptr %x1, align 8
  %elementptr11 = getelementptr i32, ptr %x_arrayptr10, i32 %load_index9
  %left_load12 = load i32, ptr %elementptr, align 4
  %right_load13 = load i32, ptr %elementptr11, align 4
  %lttmp14 = icmp slt i32 %left_load12, %right_load13
  %1 = zext i1 %lttmp14 to i32
  %if_cond = icmp ne i32 %1, 0
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %loop
  %load_index15 = load i32, ptr %l_itr, align 4
  %x_arrayptr16 = load ptr, ptr %x1, align 8
  %elementptr17 = getelementptr i32, ptr %x_arrayptr16, i32 %load_index15
  %load_rvalue18 = load i32, ptr %elementptr17, align 4
  %load_index19 = load i32, ptr %tmp_idx, align 4
  %elementptr20 = getelementptr [10000 x i32], ptr %tmp, i32 0, i32 %load_index19
  store i32 %load_rvalue18, ptr %elementptr20, align 4
  %left_load21 = load i32, ptr %l_itr, align 4
  %addtmp = add i32 %left_load21, 1
  store i32 %addtmp, ptr %l_itr, align 4
  br label %ifcont

else:                                             ; preds = %loop
  %load_index22 = load i32, ptr %r_itr, align 4
  %x_arrayptr23 = load ptr, ptr %x1, align 8
  %elementptr24 = getelementptr i32, ptr %x_arrayptr23, i32 %load_index22
  %load_rvalue25 = load i32, ptr %elementptr24, align 4
  %load_index26 = load i32, ptr %tmp_idx, align 4
  %elementptr27 = getelementptr [10000 x i32], ptr %tmp, i32 0, i32 %load_index26
  store i32 %load_rvalue25, ptr %elementptr27, align 4
  %left_load28 = load i32, ptr %r_itr, align 4
  %addtmp29 = add i32 %left_load28, 1
  store i32 %addtmp29, ptr %r_itr, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %left_load30 = load i32, ptr %tmp_idx, align 4
  %addtmp31 = add i32 %left_load30, 1
  store i32 %addtmp31, ptr %tmp_idx, align 4
  br label %cond

afterloop:                                        ; preds = %mergeBlock
  br label %cond32

cond32:                                           ; preds = %loop37, %afterloop
  %left_load33 = load i32, ptr %l_itr, align 4
  %right_load34 = load i32, ptr %mid3, align 4
  %lttmp35 = icmp slt i32 %left_load33, %right_load34
  %2 = zext i1 %lttmp35 to i32
  %while_cond36 = icmp ne i32 %2, 0
  br i1 %while_cond36, label %loop37, label %afterloop48

loop37:                                           ; preds = %cond32
  %load_index38 = load i32, ptr %l_itr, align 4
  %x_arrayptr39 = load ptr, ptr %x1, align 8
  %elementptr40 = getelementptr i32, ptr %x_arrayptr39, i32 %load_index38
  %load_rvalue41 = load i32, ptr %elementptr40, align 4
  %load_index42 = load i32, ptr %tmp_idx, align 4
  %elementptr43 = getelementptr [10000 x i32], ptr %tmp, i32 0, i32 %load_index42
  store i32 %load_rvalue41, ptr %elementptr43, align 4
  %left_load44 = load i32, ptr %tmp_idx, align 4
  %addtmp45 = add i32 %left_load44, 1
  store i32 %addtmp45, ptr %tmp_idx, align 4
  %left_load46 = load i32, ptr %l_itr, align 4
  %addtmp47 = add i32 %left_load46, 1
  store i32 %addtmp47, ptr %l_itr, align 4
  br label %cond32

afterloop48:                                      ; preds = %cond32
  %load_rvalue49 = load i32, ptr %start2, align 4
  store i32 %load_rvalue49, ptr %x_itr, align 4
  store i32 0, ptr %tmp_idx2, align 4
  br label %cond50

cond50:                                           ; preds = %loop55, %afterloop48
  %left_load51 = load i32, ptr %tmp_idx2, align 4
  %right_load52 = load i32, ptr %tmp_idx, align 4
  %lttmp53 = icmp slt i32 %left_load51, %right_load52
  %3 = zext i1 %lttmp53 to i32
  %while_cond54 = icmp ne i32 %3, 0
  br i1 %while_cond54, label %loop55, label %afterloop66

loop55:                                           ; preds = %cond50
  %load_index56 = load i32, ptr %tmp_idx2, align 4
  %elementptr57 = getelementptr [10000 x i32], ptr %tmp, i32 0, i32 %load_index56
  %load_rvalue58 = load i32, ptr %elementptr57, align 4
  %load_index59 = load i32, ptr %x_itr, align 4
  %x_arrayptr60 = load ptr, ptr %x1, align 8
  %elementptr61 = getelementptr i32, ptr %x_arrayptr60, i32 %load_index59
  store i32 %load_rvalue58, ptr %elementptr61, align 4
  %left_load62 = load i32, ptr %x_itr, align 4
  %addtmp63 = add i32 %left_load62, 1
  store i32 %addtmp63, ptr %x_itr, align 4
  %left_load64 = load i32, ptr %tmp_idx2, align 4
  %addtmp65 = add i32 %left_load64, 1
  store i32 %addtmp65, ptr %tmp_idx2, align 4
  br label %cond50

afterloop66:                                      ; preds = %cond50
  ret void
}

define void @mergeSort(ptr %x, i32 %l, i32 %r) {
mergeSort_entry:
  %x1 = alloca ptr, align 8
  store ptr %x, ptr %x1, align 8
  %l2 = alloca i32, align 4
  store i32 %l, ptr %l2, align 4
  %r3 = alloca i32, align 4
  store i32 %r, ptr %r3, align 4
  %left_load = load i32, ptr %r3, align 4
  %subtmp = sub i32 %left_load, 1
  %left_load4 = load i32, ptr %l2, align 4
  %eqtmp = icmp eq i32 %left_load4, %subtmp
  %0 = zext i1 %eqtmp to i32
  %if_cond = icmp ne i32 %0, 0
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %mergeSort_entry
  ret void

else:                                             ; preds = %mergeSort_entry
  br label %ifcont

ifcont:                                           ; preds = %else
  %x_load = load ptr, ptr %x1, align 8
  %mergeSort_arg = load i32, ptr %l2, align 4
  %left_load5 = load i32, ptr %l2, align 4
  %right_load = load i32, ptr %r3, align 4
  %addtmp = add i32 %left_load5, %right_load
  %divtmp = sdiv i32 %addtmp, 2
  call void @mergeSort(ptr %x_load, i32 %mergeSort_arg, i32 %divtmp)
  %x_load6 = load ptr, ptr %x1, align 8
  %left_load7 = load i32, ptr %l2, align 4
  %right_load8 = load i32, ptr %r3, align 4
  %addtmp9 = add i32 %left_load7, %right_load8
  %divtmp10 = sdiv i32 %addtmp9, 2
  %mergeSort_arg11 = load i32, ptr %r3, align 4
  call void @mergeSort(ptr %x_load6, i32 %divtmp10, i32 %mergeSort_arg11)
  %x_load12 = load ptr, ptr %x1, align 8
  %merge_arg = load i32, ptr %l2, align 4
  %left_load13 = load i32, ptr %l2, align 4
  %right_load14 = load i32, ptr %r3, align 4
  %addtmp15 = add i32 %left_load13, %right_load14
  %divtmp16 = sdiv i32 %addtmp15, 2
  %merge_arg17 = load i32, ptr %r3, align 4
  call void @merge(ptr %x_load12, i32 %merge_arg, i32 %divtmp16, i32 %merge_arg17)
  ret void
}
