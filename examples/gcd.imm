
@global_str = private unnamed_addr constant [25 x i8] c"Give the first integer: \00", align 1
@global_str.1 = private unnamed_addr constant [26 x i8] c"Give the second integer: \00", align 1
@global_str.2 = private unnamed_addr constant [34 x i8] c"\0AThe gcd you are looking for is: \00", align 1
@global_str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

declare void @writeInteger(i32)

declare void @writeByte(i8)

declare void @writeChar(i8)

declare void @writeString(ptr)

declare i32 @readInteger()

declare i8 @readByte()

declare i8 @readChar()

declare void @readString(i32, ptr)

declare i32 @extend(i8)

declare i8 @shrink(i32)

declare i32 @strlen(ptr)

declare i32 @strcmp(ptr, ptr)

declare void @strcpy(ptr, ptr)

declare void @strcat(ptr, ptr)

define i32 @main() {
entry:
  call void @gcd()
  ret i32 0
}

define void @gcd() {
gcd_entry:
  %a = alloca i32, align 4
  store i32 0, ptr %a, align 4
  %b = alloca i32, align 4
  store i32 0, ptr %b, align 4
  call void @writeString(ptr @global_str)
  %readInteger_call = call i32 @readInteger()
  store i32 %readInteger_call, ptr %a, align 4
  call void @writeString(ptr @global_str.1)
  %readInteger_call1 = call i32 @readInteger()
  store i32 %readInteger_call1, ptr %b, align 4
  call void @writeString(ptr @global_str.2)
  %find_gcd_arg = load i32, ptr %b, align 4
  %find_gcd_call = call i32 @find_gcd(ptr %a, i32 %find_gcd_arg)
  call void @writeInteger(i32 %find_gcd_call)
  call void @writeString(ptr @global_str.3)
  ret void
}

define i32 @find_gcd(ptr %a, i32 %b) {
find_gcd_entry:
  %a1 = alloca ptr, align 8
  store ptr %a, ptr %a1, align 8
  %b2 = alloca i32, align 4
  store i32 %b, ptr %b2, align 4
  %i = alloca i32, align 4
  store i32 0, ptr %i, align 4
  %a_load = load ptr, ptr %a1, align 8
  %left_load = load i32, ptr %a_load, align 4
  %right_load = load i32, ptr %b2, align 4
  %gttmp = icmp sgt i32 %left_load, %right_load
  %0 = zext i1 %gttmp to i32
  %if_cond = icmp ne i32 %0, 0
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %find_gcd_entry
  %a_load3 = load ptr, ptr %a1, align 8
  %load_rvalue = load i32, ptr %a_load3, align 4
  store i32 %load_rvalue, ptr %i, align 4
  br label %ifcont

else:                                             ; preds = %find_gcd_entry
  %load_rvalue4 = load i32, ptr %b2, align 4
  store i32 %load_rvalue4, ptr %i, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %cond

cond:                                             ; preds = %ifcont17, %ifcont
  %left_load5 = load i32, ptr %i, align 4
  %gttmp6 = icmp sgt i32 %left_load5, 1
  %1 = zext i1 %gttmp6 to i32
  %while_cond = icmp ne i32 %1, 0
  br i1 %while_cond, label %loop, label %afterloop

loop:                                             ; preds = %cond
  %a_load7 = load ptr, ptr %a1, align 8
  %left_load8 = load i32, ptr %a_load7, align 4
  %right_load9 = load i32, ptr %i, align 4
  %modtmp = srem i32 %left_load8, %right_load9
  %eqtmp = icmp eq i32 %modtmp, 0
  %left_load10 = load i32, ptr %b2, align 4
  %right_load11 = load i32, ptr %i, align 4
  %modtmp12 = srem i32 %left_load10, %right_load11
  %eqtmp13 = icmp eq i32 %modtmp12, 0
  %andtmp = and i1 %eqtmp, %eqtmp13
  %2 = zext i1 %andtmp to i32
  %if_cond15 = icmp ne i32 %2, 0
  br i1 %if_cond15, label %then14, label %else16

then14:                                           ; preds = %loop
  %ret_val = load i32, ptr %i, align 4
  ret i32 %ret_val

else16:                                           ; preds = %loop
  br label %ifcont17

ifcont17:                                         ; preds = %else16
  %left_load18 = load i32, ptr %i, align 4
  %subtmp = sub i32 %left_load18, 1
  store i32 %subtmp, ptr %i, align 4
  br label %cond

afterloop:                                        ; preds = %cond
  ret i32 1
}
