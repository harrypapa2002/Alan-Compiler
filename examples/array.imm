
@global_str = private unnamed_addr constant [39 x i8] c"Give a string with maximum length 30: \00", align 1

declare void @writeInteger(i32)

declare void @writeByte(i8)

declare void @writeChar(i8)

declare void @writeString(ptr)

declare i32 @readInteger()

declare i8 @readByte()

declare i8 @readChar()

declare void @readString(i32, ptr)

declare i32 @extend(i8)

declare i8 @shrink(i32)

declare i32 @strlen(ptr)

declare i32 @strcmp(ptr, ptr)

declare void @strcpy(ptr, ptr)

declare void @strcat(ptr, ptr)

define i32 @main() {
entry:
  call void @cancer()
  ret i32 0
}

define void @cancer() {
cancer_entry:
  %n = alloca i32, align 4
  store i32 0, ptr %n, align 4
  %source1 = alloca [31 x i8], align 1
  store [31 x i8] zeroinitializer, ptr %source1, align 1
  call void @writeString(ptr @global_str)
  call void @readString(i32 30, ptr %source1)
  store i32 0, ptr %n, align 4
  br label %cond

cond:                                             ; preds = %loop, %cancer_entry
  %load_index = load i32, ptr %n, align 4
  %elementptr = getelementptr [31 x i8], ptr %source1, i32 0, i32 %load_index
  %left_load = load i8, ptr %elementptr, align 1
  %neqtmp = icmp ne i8 %left_load, 0
  %0 = zext i1 %neqtmp to i32
  %while_cond = icmp ne i32 %0, 0
  br i1 %while_cond, label %loop, label %afterloop

loop:                                             ; preds = %cond
  %load_index1 = load i32, ptr %n, align 4
  %elementptr2 = getelementptr [31 x i8], ptr %source1, i32 0, i32 %load_index1
  %writeChar_arg = load i8, ptr %elementptr2, align 1
  call void @writeChar(i8 %writeChar_arg)
  %left_load3 = load i32, ptr %n, align 4
  %addtmp = add i32 %left_load3, 1
  store i32 %addtmp, ptr %n, align 4
  br label %cond

afterloop:                                        ; preds = %cond
  ret void
}
